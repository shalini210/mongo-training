Aggregation :
process and tranform data in meaninful info

db.collection.aggregate([{stage 1},{stage2 }])

each  stage  performs some operation 
some agg. stages: $match  $group $sort $skip etc

db.users.aggregate([{}])
foraggregations> db.users.aggregate([{$match:{age:22}}])

foraggregations> db.users.aggregate([{$group:{_id:"$age",totalsalary:{$sum:"$salary"}}}])
[ { _id: 22, totalsalary: 1659642 }, { _id: 32, totalsalary: 653214 } ]

 db.users.aggregate([{$project:{_id:0,UserName:"$name",Email:"$email"}}])

 db.users.aggregate([{$sort:{salary:-1}}])

db.users.aggregate([{$sort:{salary:-1}},{$project:{_id:0,UserNAme:"$name",salary:"$salary"}}])

 db.users.aggregate([{$project:{_id:0,UserNAme:"$name",salary:"$salary"}},{$sort:{salary:-1}}])

inventory :  item name , price, qty, comapny ,sellercontact:{selleraddress,sellercontact no }
itemname as Item , price as MRP,qty as instock
 db.inventory.aggregate([{$group:{_id:"$itemname",qty:{$sum:"$qty"}}},{$project:{Item:"$_id",Instock:"$qty",_id:0}}])



give items whose price is greater than 250 but less 4000 by aggregation



foraggregations> db.orders.aggregate([{$unwind:"$items"}, {$group:{_id:"$items",totalorders:{$sum:1}}}])


database : pizzas 
collections : employees and pizzas
mongodump --db=pizzas --out=C:\backupmongodata^X

export and import full database  using mongodump and mongorestore 
export and import collection using mongodump and mongorestore 

appname
opid
client
